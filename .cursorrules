// Importing necessary dependencies
import React, { useState, useEffect, useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { sendMessage, clearMessages } from '../redux/actions/aiActions';
import { RootState } from '../redux/store';
import styled from 'styled-components';
import { Message as MessageType } from '../types/aiTypes';

// Styled components for the chat interface
const ChatContainer = styled.div`
  display: flex;
  flex-direction: column;
  height: 100%;
  max-width: 400px;
  border: 1px solid #ccc;
  border-radius: 8px;
  overflow: hidden;
`;

const MessagesContainer = styled.div`
  flex: 1;
  overflow-y: auto;
  padding: 16px;
`;

const Message = styled.div<{ isAI: boolean }>`
  background-color: ${props => props.isAI ? '#f0f0f0' : '#e6f2ff'};
  border-radius: 8px;
  padding: 8px 12px;
  margin-bottom: 8px;
  max-width: 80%;
  align-self: ${props => props.isAI ? 'flex-start' : 'flex-end'};
`;

const InputContainer = styled.div`
  display: flex;
  padding: 16px;
  border-top: 1px solid #ccc;
`;

const Input = styled.input`
  flex: 1;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
`;

const SendButton = styled.button`
  margin-left: 8px;
  padding: 8px 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
`;

const AIAssistantChat: React.FC = () => {
  const [input, setInput] = useState('');
  const dispatch = useDispatch();
  const { messages, isLoading, error } = useSelector((state: RootState) => state.ai);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = () => {
    if (input.trim()) {
      dispatch(sendMessage(input));
      setInput('');
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSendMessage();
    }
  };

  return (
    <ChatContainer>
      <MessagesContainer>
        {messages.map((msg: MessageType, index: number) => (
          <Message key={index} isAI={msg.sender === 'ai'}>
            {msg.content}
          </Message>
        ))}
        {isLoading && <Message isAI={true}>AI is thinking...</Message>}
        {error && <Message isAI={true}>Error: {error}</Message>}
        <div ref={messagesEndRef} />
      </MessagesContainer>
      <InputContainer>
        <Input
          type="text"
          value={input}
          onChange={handleInputChange}
          onKeyPress={handleKeyPress}
          placeholder="Type your message..."
          disabled={isLoading}
        />
        <SendButton onClick={handleSendMessage} disabled={isLoading}>
          Send
        </SendButton>
      </InputContainer>
    </ChatContainer>
  );
};

export default AIAssistantChat;
